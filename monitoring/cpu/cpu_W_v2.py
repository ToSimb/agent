import time
import subprocess


def run_wmic(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É wmic –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫."""
    try:
        result = subprocess.check_output(command, shell=True, text=True, encoding="utf-8")
        return result.strip().split("\n")
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞: {e}"]


def get_cpu_info():
    time_start = time.time()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
    with open("2.txt", "w", encoding="utf-8") as f:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö
        cpu_info = run_wmic(
            "wmic cpu get DeviceID, Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed, CurrentClockSpeed, LoadPercentage /format:csv")
        time_get_cpus = time.time()

        f.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö:\n")
        f.write("-" * 50 + "\n")
        headers = []

        for i, line in enumerate(cpu_info):
            if i == 0:
                headers = line.split(",")
                continue
            values = line.split(",")
            if len(values) == len(headers):
                cpu_data = dict(zip(headers, values))
                f.write(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_data.get('DeviceID', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
                f.write(f"–ò–º—è: {cpu_data.get('Name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').strip()}\n")
                f.write(f"–§–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {cpu_data.get('NumberOfCores', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
                f.write(f"–õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {cpu_data.get('NumberOfLogicalProcessors', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
                f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu_data.get('MaxClockSpeed', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} MHz\n")
                f.write(f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu_data.get('CurrentClockSpeed', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} MHz\n")
                f.write(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_data.get('LoadPercentage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                f.write("-" * 50 + "\n")
        time_pars_cpus = time.time()

        cpu_info = run_wmic(
            "wmic cpu get CurrentClockSpeed, LoadPercentage /format:csv")
        time_get_cpus1 = time.time()

        f.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö:\n")
        f.write("-" * 50 + "\n")
        headers = []

        for i, line in enumerate(cpu_info):
            if i == 0:
                headers = line.split(",")
                continue
            values = line.split(",")
            if len(values) == len(headers):
                cpu_data = dict(zip(headers, values))
                f.write(f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu_data.get('CurrentClockSpeed', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} MHz\n")
                f.write(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_data.get('LoadPercentage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                f.write("-" * 50 + "\n")
        time_pars_cpus1 = time.time()



        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        perf_info = run_wmic(
            "wmic path Win32_PerfFormattedData_PerfOS_Processor get Name, PercentProcessorTime, InterruptsPersec, PercentUserTime, PercentPrivilegedTime, PercentInterruptTime, PercentDPCTime, PercentIdleTime /format:csv")
        time_get_perf = time.time()

        headers = []
        for i, line in enumerate(perf_info):
            if i == 0:
                headers = line.split(",")
                continue
            values = line.split(",")
            if len(values) == len(headers):
                perf_data = dict(zip(headers, values))
                if perf_data.get("Name", "") and perf_data["Name"].isdigit():
                    f.write(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ {perf_data['Name']}\n")
                    f.write(f"  üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {perf_data.get('PercentProcessorTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                    f.write(f"  üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {perf_data.get('InterruptsPersec', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
                    f.write(
                        f"  üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ: {perf_data.get('PercentUserTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                    f.write(
                        f"  üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ: {perf_data.get('PercentPrivilegedTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                    f.write(
                        f"  üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {perf_data.get('PercentInterruptTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                    f.write(
                        f"  üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (DPC): {perf_data.get('PercentDPCTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                    f.write(f"  üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è: {perf_data.get('PercentIdleTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}%\n")
                    f.write("-" * 50 + "\n")

        time_pars_perf = time.time()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        f.write(f"–≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º     {time_get_cpus - time_start}\n")
        f.write(f"–≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º      {time_pars_cpus - time_get_cpus}\n")
        f.write(f"–≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º     {time_get_cpus1 - time_pars_cpus}\n")
        f.write(f"–≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º      {time_pars_cpus1 - time_get_cpus1}\n")
        f.write(f"–≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç–æ–∫–∞–º         {time_get_perf - time_pars_cpus1}\n")
        f.write(f"–≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç–æ–∫–∞–º          {time_pars_perf - time_get_perf}\n")


# –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
get_cpu_info()
